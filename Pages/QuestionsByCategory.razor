@page "/questions/{categoryID:int}/{numberOfQuestions:int}"
@inject HttpClient Http
@inject NavigationManager NM
@using Newtonsoft.Json
@using TriviaFrontend.Models

<h3>Questions</h3>
@if (question == null)
{
    <h3>Loading....</h3>
}
else
{
    foreach (var item in question)
    {
        <div class="card">
            <h5>Question: @item.QuestionNo</h5>
            <h5>Diffficulty: @item.Difficulty</h5>
            <h5>Category: @item.Category</h5>
            <h4>Question: @item.QuestionTxt</h4>
            <form>
                @if (!Corrected)
                {
                    @foreach (var items in @item.Alternatives)
                    {
                        <input type="radio" name="alt" value="@items" @onchange="(e => selectedAnswer(e,item.QuestionNo))" />
                        <label for="alt" style="min-width:10%;text-align:left"> @items</label>
                    }
                }
            </form>
            @if (Corrected)
            {
                <h5>Your answer: @item.Answer</h5>
                <h5>Correct answer: @item.CorrectAnswer</h5>
            }
        </div>
    }
    @if (Corrected)
    {
        <h5>You got @CorrectAnswers of @numberOfQuestions</h5>
        <input type="button" value="Finish" @onclick="@reset" />
    }
    else
    {
        <button @onclick="@checkAnswer">Check answers</button>
    }
}
@code {
    [Parameter] public int numberOfQuestions { get; set; }
    [Parameter] public int categoryID { get; set; }

    public List<Question> question { get; set; }

    public string CategoryName { get; set; }
    public string jsonCategories { get; set; } = string.Empty;

    public bool Corrected { get; set; } = false;

    public int CorrectAnswers { get; set; }

    protected override async Task OnInitializedAsync()
    {

        using var httpResponse = await Http.GetAsync($"https://localhost:44321/api/Response/{categoryID}/{numberOfQuestions}");
        if (!httpResponse.IsSuccessStatusCode || numberOfQuestions == 0)
        {
            string errorMessage = httpResponse.ReasonPhrase;
            NM.NavigateTo("/errorpage");
        }
        else
        {
            jsonCategories = await httpResponse.Content.ReadAsStringAsync();
            question = JsonConvert.DeserializeObject<List<Question>>(jsonCategories);
        }
    }
    private void selectedAnswer(ChangeEventArgs args, object sender)
    {
        var ans = args.Value.ToString();
        var temp = question.FirstOrDefault(x => x.QuestionNo.Equals(Convert.ToInt32(sender)));
        temp.Answer = ans;
    }
    private void checkAnswer()
    {
        foreach (var field in question)
        {
            if (field.Answer == field.CorrectAnswer)
            {
                CorrectAnswers++;
            }
        }
        Corrected = true;
    }
    private void reset()
    {
        NM.NavigateTo("/");
    }
}